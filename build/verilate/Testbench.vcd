$version Generated by VerilatedVcd $end
$timescale 10ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module Testbench $end
  $var wire 1 2 clk $end
  $var wire 1 # rst $end
  $var wire 32 $ multiplicand [31:0] $end
  $var wire 32 % multiplier [31:0] $end
  $var wire 1 & start $end
  $var wire 64 , product [63:0] $end
  $var wire 1 . finish $end
  $var wire 32 5 i [31:0] $end
  $var wire 1 ) error $end
  $scope module judge $end
   $var wire 1 2 clk $end
   $var wire 1 ' rstn $end
   $var wire 32 $ multiplicand [31:0] $end
   $var wire 32 % multiplier [31:0] $end
   $var wire 1 & start $end
   $var wire 64 , product [63:0] $end
   $var wire 1 . finish $end
   $var wire 1 ) error $end
   $var wire 32 * multiplicand_reg [31:0] $end
   $var wire 32 + multiplier_reg [31:0] $end
  $upscope $end
  $scope module mul $end
   $var wire 32 6 LEN [31:0] $end
   $var wire 1 2 clk $end
   $var wire 1 # rst $end
   $var wire 32 $ multiplicand [31:0] $end
   $var wire 32 % multiplier [31:0] $end
   $var wire 1 & start $end
   $var wire 64 , product [63:0] $end
   $var wire 1 . finish $end
   $var wire 32 7 PRODUCT_LEN [31:0] $end
   $var wire 32 3 multiplicand_reg [31:0] $end
   $var wire 64 / product_reg [63:0] $end
   $var wire 32 8 CNT_LEN [31:0] $end
   $var wire 32 9 CNT_NUM [31:0] $end
   $var wire 2 4 fsm_state_reg [1:0] $end
   $var wire 5 1 work_cnt [4:0] $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 ( i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
0&
0'
b00000000000000000000000000000000 (
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b0000000000000000000000000000000000000000000000000000000000000000 ,
1.
b0000000000000000000000000000000000000000000000000000000000000000 /
b00000 1
02
b00000000000000000000000000000000 3
b00 4
b00000000000000000000000000000000 5
b00000000000000000000000000100000 6
b00000000000000000000000001000000 7
b00000000000000000000000000000101 8
b00000000000000000000000000011111 9
#500
12
#1000
02
#1500
12
#2000
0#
b00000000000000000000000000010100 $
b00000000000000000000000000101000 %
1&
1'
02
#2500
b00000000000000000000000000010100 *
b00000000000000000000000000101000 +
b0000000000000000000000000000000000000000000000000000000000101000 ,
b0000000000000000000000000000000000000000000000000000000000101000 /
12
b00000000000000000000000000010100 3
b01 4
#3000
02
#3500
1)
b0000000000000000000000000000000000000000000000000000000000000000 ,
0.
b0000000000000000000000000000000000000000000000000000000000010100 /
b11111 1
12
b10 4
#4000
b00000000000000000000000000000001 (
02
