$version Generated by VerilatedVcd $end
$timescale 10ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module Testbench $end
  $var wire 1 5 clk $end
  $var wire 1 # rst $end
  $var wire 32 $ multiplicand [31:0] $end
  $var wire 32 % multiplier [31:0] $end
  $var wire 1 & start $end
  $var wire 64 / product [63:0] $end
  $var wire 1 1 finish $end
  $var wire 32 7 i [31:0] $end
  $var wire 1 , error $end
  $scope module judge $end
   $var wire 1 5 clk $end
   $var wire 1 ' rstn $end
   $var wire 32 $ multiplicand [31:0] $end
   $var wire 32 % multiplier [31:0] $end
   $var wire 1 & start $end
   $var wire 64 / product [63:0] $end
   $var wire 1 1 finish $end
   $var wire 1 , error $end
   $var wire 32 - multiplicand_reg [31:0] $end
   $var wire 32 . multiplier_reg [31:0] $end
  $upscope $end
  $scope module mul $end
   $var wire 32 8 LEN [31:0] $end
   $var wire 1 5 clk $end
   $var wire 1 # rst $end
   $var wire 32 $ multiplicand [31:0] $end
   $var wire 32 % multiplier [31:0] $end
   $var wire 1 & start $end
   $var wire 64 / product [63:0] $end
   $var wire 1 1 finish $end
   $var wire 32 9 PRODUCT_LEN [31:0] $end
   $var wire 32 ) multiplicand_reg [31:0] $end
   $var wire 64 2 product_reg [63:0] $end
   $var wire 32 : CNT_LEN [31:0] $end
   $var wire 32 ; CNT_NUM [31:0] $end
   $var wire 2 6 fsm_state_reg [1:0] $end
   $var wire 5 4 work_cnt [4:0] $end
   $var wire 32 * high_product [31:0] $end
   $var wire 32 + low_product [31:0] $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 ( i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
0&
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
0,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b0000000000000000000000000000000000000000000000000000000000000000 /
11
b0000000000000000000000000000000000000000000000000000000000000000 2
b00000 4
05
b00 6
b00000000000000000000000000000000 7
b00000000000000000000000000100000 8
b00000000000000000000000001000000 9
b00000000000000000000000000000101 :
b00000000000000000000000000011111 ;
#500
15
#1000
05
#1500
15
#2000
0#
b00000000000000000000000000010100 $
b00000000000000000000000000101000 %
1&
1'
05
#2500
b00000000000000000000000000010100 )
b00000000000000000000000000010100 -
b00000000000000000000000000101000 .
b0000000000000000000000000000000000000000000000000000000000101000 /
b0000000000000000000000000000000000000000000000000000000000101000 2
15
b01 6
#3000
05
#3500
b00000000000000000000000000101000 +
1,
b0000000000000000000000000000000000000000000000000000000000000000 /
01
b0000000000000000000000000000000000000000000000000000000000000000 2
b11111 4
15
b10 6
#4000
b00000000000000000000000000000001 (
05
